<?php
/**
 * @file
 * Code for the Ding event feature.
 */

/**
 * Implements hook_date_format_types().
 */
function ding_event_date_format_types() {
  return array(
    'ding_event_date_format' => t('Ding event date format'),
  );
}

/**
 * Implements hook_date_formats().
 *
 * Provides specific extra formats used by Ding! modules and assigning them
 * to specific date types.
 */
function ding_event_date_formats() {
  $formats = array();

  $formats[] = array(
    'type'    => 'ding_event_date_format',
    'format'  => 'D, d/m/Y',
    'locales' => array(),
  );

  // Save certain date formats into variables.
  foreach ($formats as $format) {
    variable_set('date_format_' . $format['type'], $format['format']);
  }

  return $formats;
}

/**
 * Implements hook_ding_library_menu_links().
 */
function ding_event_ding_library_menu_links() {
  return array(
    'events' => array(
      'title' => 'Events',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function ding_event_field_formatter_info() {
  return array(
    'date_time_seperate_lines' => array(
      'label' => t('Date and time on seperate lines'),
      'field types' => array('datetime'),
      'settings' => array(),
    ),
    'ding_event_date' => array(
      'label' => t('Ding event date'),
      'field types' => array('datetime'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ding_event_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $formatter = $display['type'];
  $vars = array(
    'timezone' => NULL,
    'dates' => NULL,
    'attributes' => array(),
  );

  switch ($formatter) {
    case 'date_time_seperate_lines':
      foreach ($items as $delta => $item) {
        $vars['dates'] = date_formatter_process($formatter, $entity_type, $entity, $field, $instance, $langcode, $item, $display);
        $element[$delta] = array('#markup' => theme('date_time_seperate_lines', $vars));
      }
      break;

    case 'ding_event_date':
      foreach ($items as $delta => $item) {
        $format = 'ding_event';
        if (substr($item['value'], -8) == '23:00:00') {
          $format = 'ding_event_all_day';
        }

        $date = new DateTime(
          $item['value'],
          new DateTimeZone($item['timezone_db'])
        );
        $ts = $date->getTimestamp();
        $str = format_date($ts, $format, '', $item['timezone']);

        if ($item['value'] != $item['value2']) {
          $date = new DateTime(
            $item['value2'],
            new DateTimeZone($item['timezone_db'])
          );
          $ts = $date->getTimestamp();
          $str .= ' - ' . format_date($ts, $format, '', $item['timezone']);
        }

        $element[$delta] = array('#markup' => $str);
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function ding_event_theme() {
  return array(
    'date_time_seperate_lines' => array(
      'variables' => array(
        'variables' => array(
          'timezone' => NULL,
          'dates' => NULL,
          'attributes' => NULL,
        ),
      ),
    ),
  );
}

/**
 * Theme function which shows two lines with date and time.
 *
 * Used on ding_events.
 */
function theme_date_time_seperate_lines($vars) {
  if (isset($vars['dates'])) {
    $dates = $vars['dates'];
    $time = $dates['value']['formatted_time'];
    $date = format_date(strtotime($dates['value']['formatted_iso']), 'date_only');

    return '<div class="time field-label-inline clearfix"><div class="field-label">' . t('Time:') . '</div>' .
      '<div class="field-items">' . $time . '</div></div>' .
      '<div class="date field-label-inline clearfix"><div class="field-label">' . t('Date:') . '</div>' .
      '<div class="field-items">' . $date . '</div></div>';
  }
  return FALSE;
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Adds extra validation to event edit form.
 */
function ding_event_form_ding_event_node_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'ding_event_node_form_validate';
}

/**
 * Additional validation of ding event edit form.
 */
function ding_event_node_form_validate($form, &$form_state) {
  $lng = $form_state['values']['language'];
  $fee = $form_state['values']['field_event_fee'][$lng][0]['value'];
  if (!is_numeric($fee) || intval($fee) < 0) {
    form_set_error('field_event_fee', t('Fee should be 0 or any positive number'));
  }
}

include_once 'ding_event.features.inc';
